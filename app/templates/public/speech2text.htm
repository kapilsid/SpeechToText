
<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
    <script src="../js/WebAudioRecorder.js"></script>
</head>
  
<body class="container">

        <h1> Speech To Text</h1>
        <br/>
        <!-- <a id="download">Download</a> -->
        <button id="start" class="btn" style="font-size:28px" > 
           <span>Rec</span> <i class="fa fa-microphone" ></i>
        </button>
        <button id="play" class="btn" style="font-size:28px" > 
            <span>Play</span> <i class="fa fa-play" ></i>
        </button>
        <br/>
        <br/>
        <br/>
        <textarea row="5" cols="100">

        </textarea>
        <div id="formats"></div>
        <div id="log"></div>

        <script type="text/javascript">
        
            let started = false;
            let shouldStop = false;
            let stopped = false;
            // const downloadLink = document.getElementById('download');

            var gumStream; 						//stream from getUserMedia()
            var recorder; 						//WebAudioRecorder object
            var input; 							//MediaStreamAudioSourceNode  we'll be recording
            var encodingType; 					//holds selected encoding for resulting audio (file)
            var encodeAfterRecord = true;       // when to encode

            // shim for AudioContext when it's not avb. 
            var AudioContext = window.AudioContext || window.webkitAudioContext;
            var audioContext; //new audio context to help us record
            
            const recordButton = document.getElementById('start');
 
            recordButton.addEventListener('click', function() {
                if(started) {
                    shouldStop = true;
                    $('#start > i').css({ "color": 'black'});
                    $('#start > span').text("Rec");
                    stopRecording();
                }else{
                    started = true;
                    $('#start > i').css({ "color": 'red'});
                    $('#start > span').text("Stop");
                    startRecording();
                }
            });

            
            function startRecording() {
                console.log("startRecording() called");

                /*
                    Simple constraints object, for more advanced features see
                    https://addpipe.com/blog/audio-constraints-getusermedia/
                */
                
                var constraints = { audio: true, video:false }

                /*
                    We're using the standard promise based getUserMedia() 
                    https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
                */

                navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
                    __log("getUserMedia() success, stream created, initializing WebAudioRecorder...");

                    /*
                        create an audio context after getUserMedia is called
                        sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                        the sampleRate defaults to the one set in your OS for your playback device

                    */
                    audioContext = new AudioContext();

                    //update the format 
                    document.getElementById("formats").innerHTML="Format: 2 channel  @ "+audioContext.sampleRate/1000+"kHz"

                    //assign to gumStream for later use
                    gumStream = stream;
                    
                    /* use the stream */
                    input = audioContext.createMediaStreamSource(stream);
                    
                    //stop the input from playing back through the speakers
                    //input.connect(audioContext.destination)

                    //get the encoding 
                    encodingType = "wav";
                    
                    
                    recorder = new WebAudioRecorder(input, {
                        workerDir: "./js/", // must end with slash
                        encoding: encodingType,
                        numChannels:1, //2 is the default, mp3 encoding supports only 2
                        // onEncoderLoading: function(recorder, encoding) {
                        //     // show "loading encoder..." display
                        //     __log("Loading "+encoding+" encoder...");
                        // },
                        // onEncoderLoaded: function(recorder, encoding) {
                        //     // hide "loading encoder..." display
                        //     __log(encoding+" encoder loaded");
                        // }
                    });

                    recorder.onComplete = function(recorder1, blob) { 
                        __log("Encoding complete");
                        $.ajax({
                            type: 'POST',
                            url: 'http://3.218.104.126:8090/listen',
                            data: blob,
                            contentType: 'application/my-binary-type', // set accordingly
                            processData: false
                        });
                    }

                    // recorder.setOptions({
                    //     ogg: {quality: 0.5},
                    //     mp3: {bitRate: 160}
                    // });

                    //start the recording process
                    recorder.startRecording();

                    __log("Recording started");

                }).catch(function(err) {
                    //enable the record button if getUSerMedia() fails
                    __log(err);    
                });

            }

            function stopRecording() {
                console.log("stopRecording() called");
                
                //tell the recorder to finish the recording (stop recording + encode the recorded audio)
                recorder.finishRecording();

                __log('Recording stopped');
            }
           
            function __log(e, data) {
                log.innerHTML += "\n" + e + " " + (data || '');
            }

    </script>

    </body>
</html>