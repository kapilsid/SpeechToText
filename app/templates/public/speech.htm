
<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">

</head>
  
<body class="container">

        <h1> Speech To Text</h1>
        <br/>
        <!-- <a id="download">Download</a> -->
        <button id="start" class="btn" style="font-size:28px" > 
           <span>Rec</span> <i class="fa fa-microphone" ></i>
        </button>
        <button id="play" class="btn" style="font-size:28px" > 
            <span>Play</span> <i class="fa fa-play" ></i>
        </button>
        <br/>
        <br/>
        <br/>
        <textarea row="5" cols="100">

        </textarea>

        <script type="text/javascript">
        
            let started = false;
            let shouldStop = false;
            let stopped = false;
            // const downloadLink = document.getElementById('download');

            const recordButton = document.getElementById('start');

            recordButton.addEventListener('click', function() {
                if(started) {
                    shouldStop = true;
                    $('#start > i').css({ "color": 'black'});
                    $('#start > span').text("Rec");
                }else{
                    started = true;
                    $('#start > i').css({ "color": 'red'});
                    $('#start > span').text("Stop");
                    
                    navigator.mediaDevices.getUserMedia({ audio: true, video: false })
                     .then(handleSuccess);
                }
            });

            const handleSuccess = function(stream) {
                const options = {
                    audioBitsPerSecond : 128000,
                    mimeType: 'audio/webm'
                };
                const chunks = [];
                const mediaRecorder = new MediaRecorder(stream, options);

                mediaRecorder.ondataavailable = function(e) {
                    chunks.push(e.data);
                    if(shouldStop === true && stopped === false) {
                        mediaRecorder.stop();
                        stopped = true;
                    }
                }

                mediaRecorder.onstop = function(e) {
                    console.log("data available after MediaRecorder.stop() called.");
                    var blob = new Blob(chunks,{ type : 'audio/wav; codecs=0' });
               
                    $.ajax({
                        type: 'POST',
                        url: 'http://3.218.104.126:8090/listen',
                        data: blob,
                        contentType: 'application/my-binary-type', // set accordingly
                        processData: false
                    });
                    //downloadLink.href = URL.createObjectURL(new Blob(chunks));
                    //downloadLink.download = 'acetest.wav';

                    // var audio = document.createElement('audio');
                    // audio.controls = true;
                    // var blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });
                    // var audioURL = window.URL.createObjectURL(blob);
                    // audio.src = audioURL;
                    // console.log("recorder stopped");
                }
                
                // mediaRecorder.addEventListener('dataavailable', function(e) {
                //     if (e.data.size > 0) {
                //         chunks.push(e.data);
                //     }

                //     if(shouldStop === true && stopped === false) {
                //         mediaRecorder.stop();
                //         stopped = true;
                //     }
                // });
                mediaRecorder.start(500);
            };

            const processStream = function(stream) {
                var AudioContext = window.AudioContext || window.webkitAudioContext;
                var context = new AudioContext();
                var source = context.createMediaStreamSource(stream);

                const processor = context.createScriptProcessor(1024, 1, 1);

                source.connect(processor);
                processor.connect(context.destination);

                processor.onaudioprocess = function(e) {
                    // Do something with the data, e.g. convert it to WAV
                    console.log(e.inputBuffer);
                };
            };
            
           

    </script>

    </body>
</html>